class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size(); 
        if (n == 1) return intervals;
        
        int m = 0;
        for (int i = 0; i < n; i++) {
            m = max(intervals[i][1], m);
        }
        
        vector<int> hlpr(2*m+1, -1);
        for (int i = 0; i < n; i++) {
            int s = 2*intervals[i][0];
            int e = 2*intervals[i][1];
            
            for (int j = s; j <= e; j++) hlpr[j] = 1;
        }
        
        vector<vector<int>> ans;
        int i = 0;
        while (i < 2*m + 1) {
            while (i < 2*m+1 && hlpr[i] == -1)
                i++;
            
            vector<int> interval;
            interval.push_back(i/2);
            while (i < 2*m+1 && hlpr[i] == 1)
                i++;
            interval.push_back((i-1)/2);
            ans.push_back(interval);
        }
        
        return ans;
        // TC = 0(N + M) & SC = O(M) where, M is the maximum element present in the array.
    }
};