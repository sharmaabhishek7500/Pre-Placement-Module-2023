class Solution {
public:
    // make the connections after finding and deleting the key
    TreeNode* connections(TreeNode* root){
        if(!root->left)return root->right;
        else if(!root->right) return root->left;
        
        TreeNode* rightChild = root->right;
        TreeNode* lastRight = here_islastRight(root->left);
        lastRight->right = rightChild;
        return root->left;
    }
    
    // find the last right node of left subtree of key
    TreeNode* here_islastRight(TreeNode* root){
        if(!root->right){
            return root;
        }
        return here_islastRight(root->right);
    }
    
    // main function which return the BST after deleting the node
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == NULL)return NULL;
        
        if(root->val==key) return connections(root);
        
        TreeNode* node = root;
        while(root){
            if(key<root->val){
                if(root->left && root->left->val==key){
                    root->left = connections(root->left);
                    break;
                }
                else{
                    root = root->left;
                }
            }
            else{
                if(root->right && root->right->val==key){
                    root->right = connections(root->right);
                    break;
                }
                else{
                    root = root->right;
                }
            }
        }
        return node;
    }
};