class Solution {
public:
    // Reverse linklist upto k nodes and return previous and current head of rotated list
    pair<ListNode*, ListNode *> reverseLinkList(ListNode* head, int k) {
        ListNode *prev {nullptr};
        ListNode *curr {nullptr};
        ListNode *next {head};
        ListNode *prevHead = head;

        while(k > 0) {
            prev = curr;
            curr = next;
            next = next->next;
            curr->next = prev;
            --k;
        }
        return make_pair(prevHead, curr);
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(!head || !head->next) return head;

        ListNode *tmp = head;
        ListNode *newHead {nullptr};
        ListNode *lastNode {nullptr};
        int n = k;

        // check if there are enough nodes to proceed
        while(--n) {
            tmp = tmp->next;
            if(!tmp) return head;
        }
        tmp = head;

        while(tmp) {
            // tmp will always point to next kth node
            ListNode *nextKthNode = tmp;
            n = k;
            // move tmp to the next kth node
            while(--n >= 0 && tmp) {
                tmp = tmp->next;
            }

            // if enough nodes to continue
            if(n < 0) {
                auto [prev, curr] = reverseLinkList(nextKthNode, k);
                // set new node of modified list
                if(!newHead) newHead = curr;

                // maintain a pointer to the last node of the list, so that we can attach it to
                // next kth node
                if(!lastNode) {
                    lastNode = prev;
                } else {
                    lastNode->next = curr;
                    lastNode = prev;
                }
            } else {
                // if there are any left out nodes, attach it to the tail
                lastNode->next = nextKthNode;
            }
        }
        return newHead;        
    }
};