class Solution {
public:
    void helper(vector<int>& nums, vector<vector<int>>& res, vector<int> v, multiset<int> s)
    {
        if (v.size() == nums.size())
        {
            res.push_back(v);
            return;
        }
        for (int i = 0; i < nums.size(); i++)
        {
            if (i != 0 && nums[i] == nums[i-1])
            {
                continue;
            }
            if (s.count(nums[i]) != 0)
            {
                multiset<int>::iterator pos = s.find(nums[i]);
                s.erase(pos);
                v.push_back(nums[i]);
                helper(nums, res, v, s);
                v.pop_back();
                s.insert(nums[i]);
            }
        }
        return;
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> v;
        multiset<int> s;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++)
        {
            s.insert(nums[i]);
        }
        helper(nums, res, v, s);
        return res;
    }
};