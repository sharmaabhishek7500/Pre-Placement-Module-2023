class Solution {
public:
    void helper(vector<int>& candidates, int target, int index, vector<vector<int>>& res, vector<int>& v)
    {
        if (target == 0)
        {
            res.push_back(v);
            return;
        }
        for (int i = index; i < candidates.size(); i++)
        {
            if ( i != index && candidates[i] == candidates[i-1])
            {
                continue;
            }
            if (target-candidates[i] >= 0)
            {
                v.push_back(candidates[i]);
                helper(candidates, target-candidates[i], i+1, res, v);
                v.pop_back();
            }
        }
        return;
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> v;
        sort(candidates.begin(), candidates.end());
        helper(candidates, target, 0, res, v);
        return res;
    }
};